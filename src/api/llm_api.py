import logging

from fastapi import FastAPI, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

from src.llm.create_rag_db import update_chroma_db
from src.llm.llm_model import MarketplaceJourney

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

description = """
MarketplaceJourney API

## Overview

This API provides access to the MarketplaceJourney interactive learning assistant,
which helps users identify their knowledge gaps and recommends content
tailored to their preferences.

## Endpoints

### `POST /query`

This endpoint accepts a user's question and returns a response generated by
the MarketplaceJourney assistant. It can optionally end the session if the interaction
reaches a conclusion phase.

#### Request

- Method: `POST`
- URL: `/query`
- Body (JSON):
  - `question` (str): The user's question.

#### Response

- Status: `200 OK`
- Body (JSON):
  - `message` (str): The response message from the assistant.
  - `end_session` (bool, optional): Indicates whether the session should be ended after the response.

### `POST /end-session`

This endpoint is used to explicitly end a session, ensuring that all resources are cleaned up properly.

#### Request

- Method: `POST`
- URL: `/end-session`

#### Response

- Status: `200 OK`
- Body (JSON):
  - `message` (str): Confirmation that the session has ended successfully.

#### Example

```bash
curl -X POST "http://localhost:8000/query" -H "Content-Type: application/json"
-d '{"question": "Qual celular possui a venda?",
"stage": "main"}'
```
"""

app = FastAPI(title="MarketplaceJourney API", description=description, version="1.0.0")

retriever = update_chroma_db()
study_journey = MarketplaceJourney(retriever=retriever)


class QueryRequest(BaseModel):
    question: str = Field(
        ...,
        example="What smartphones do you have?",
        description="The question to ask the chatbot.",
    )


class QueryResponse(BaseModel):
    message: str
    end_session: bool = False


@app.post("/query", response_model=QueryResponse)
def query_model(request: QueryRequest):
    try:
        message = study_journey.get_answer(question=request.question)
        end_session = study_journey.chatbot.state == "ThankYou"
        return QueryResponse(message=message["text"], end_session=end_session)
    except Exception as e:
        logging.error(f"Erro ao processar a requisição: {str(e)}")
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "message": "An error occurred while processing your request.",
                "details": str(e),
            },
        )


@app.post("/end-session")
def end_session():
    try:
        study_journey.end_session()
        return {"message": "Session ended successfully"}
    except Exception as e:
        logging.error(f"Erro ao tentar finalizar a sessão: {str(e)}")
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "Failed to end session.", "details": str(e)},
        )
